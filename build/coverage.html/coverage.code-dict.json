{"/home/travis/build/npmtest/node-npmtest-hoodie-cli/test.js":"/* istanbul instrument in package npmtest_hoodie_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hoodie-cli/lib.npmtest_hoodie_cli.js":"/* istanbul instrument in package npmtest_hoodie_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_hoodie_cli = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_hoodie_cli = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-hoodie-cli/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-hoodie-cli && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_hoodie_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_hoodie_cli\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_hoodie_cli.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_hoodie_cli.rollup.js'] =\n            local.assetsDict['/assets.npmtest_hoodie_cli.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_hoodie_cli.__dirname + '/lib.npmtest_hoodie_cli.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hoodie-cli/node_modules/hoodie-cli/bin/hoodie":"#!/usr/bin/env node\n\nvar CLI = require('../lib/cli');\nvar argv = require('optimist').argv;\n\nnew CLI().argv(argv);\n","/home/travis/build/npmtest/node-npmtest-hoodie-cli/node_modules/hoodie-cli/lib/cli.js":"var hoodie = require('./main');\nvar con = require('./cli/util/console');\nvar shell = require('shelljs');\n\n//\n// Command line interface object.\n//\n\nfunction CLI() {\n  this.cli = this;\n}\n\n\n//\n// check whether we're running an outdated version\n// of hoodie-cli\n//\nhoodie.emit('checkUpdate');\n\ntry {\n\n  shell.which('git', {\n    async: true,\n    silent: true\n  }, function (err) {\n    throw err;\n  });\n\n} catch (err) {\n  hoodie.emit('warn', 'git command could not be found.');\n  process.exit(1);\n}\n\n\n///\n// Command line commands.\n//\n\nCLI.prototype.argv = require('./cli/argv');\n\nCLI.prototype.new = require('./cli/new');\nCLI.prototype.install = require('./cli/install');\nCLI.prototype.uninstall = require('./cli/uninstall');\nCLI.prototype.help = require('./cli/help');\nCLI.prototype.start = require('./cli/start');\nCLI.prototype.reset = require('./cli/reset');\n\nCLI.prototype.unknown = require('./cli/unknown');\nCLI.prototype.version = require('./cli/version');\nCLI.prototype.logo = require('./cli/logo');\n\n\n//\n// CLI messages.\n//\n\nhoodie.on('info', function() {\n  con.info.apply(this, arguments);\n});\n\nhoodie.on('success', function() {\n  con.success.apply(this, arguments);\n});\n\nhoodie.on('warn', function() {\n  con.warn.apply(this, arguments);\n});\n\nhoodie.on('err', function() {\n  con.err.apply(this, arguments);\n});\n\nhoodie.on('raw', function() {\n  con.raw.apply(this, arguments);\n});\n\n\nmodule.exports = CLI;\n","/home/travis/build/npmtest/node-npmtest-hoodie-cli/node_modules/hoodie-cli/lib/main.js":"var Hoodie = require('./hoodie'); // jshint ignore:line\n\nmodule.exports = new Hoodie();\n","/home/travis/build/npmtest/node-npmtest-hoodie-cli/node_modules/hoodie-cli/lib/hoodie.js":"var events = require('events');\nvar util = require('util');\nvar updateNotifier = require('./cli/util/notifier');\n\n//\n// Hoodie object.\n//\n// Events:\n//\n//   - `error` {Event} triggered with info compatible with console.error.\n//   - `log` {Event} triggered with info compatible with console.log.\n//   - `warn` {Event} triggered with info compatible with console.warn.\n//   - `raw` {Event} trigger with info that should not be formatted.\n//\n\nfunction initialize () {\n\n  // error events must always have a listener.\n  this.on('error', function(err) {\n    console.log(err);\n  });\n\n  this.on('checkUpdate', function() {\n    updateNotifier();\n  });\n\n}\n\nfunction Hoodie() {\n\n  // initialize Hoodie\n  initialize.call(this);\n\n  // initialize each command and inject the `hoodie` dependency.\n  this.new = require('./hoodie/new').exec(this);\n  this.install = require('./hoodie/install').exec(this);\n  this.uninstall = require('./hoodie/uninstall').exec(this);\n  this.start = require('./hoodie/start').exec(this);\n  this.reset = require('./hoodie/reset').exec(this);\n  this.version = require('./hoodie/version').exec(this);\n}\n\n\nutil.inherits(Hoodie, events.EventEmitter);\n\n\n//\n// Initialize Hoodie.\n//\nmodule.exports = Hoodie;\n","/home/travis/build/npmtest/node-npmtest-hoodie-cli/node_modules/hoodie-cli/lib/cli/util/notifier.js":"var updateNotifier = require('update-notifier');\nvar pkg = require('../../../package.json');\n\nmodule.exports = function() {\n\n  var notifier = updateNotifier({\n    packageName: pkg.name,\n    packageVersion: pkg.version,\n    updateCheckInterval: 1000 * 60 * 60 * 1 // 1 hr\n  });\n\n  if (notifier.update) {\n    notifier.notify(true);\n  }\n\n};\n\n","/home/travis/build/npmtest/node-npmtest-hoodie-cli/node_modules/hoodie-cli/lib/hoodie/new.js":"var Command = require('./util/command');\nvar dirUtils = require('./util/dir');\n\nvar util = require('util');\nvar fs = require('graceful-fs');\nvar rmrf = require('rimraf');\nvar async = require('async');\nvar path = require('path');\nvar shell = require('shelljs');\nvar npm = require('npm');\nvar StdOutFixture = require('fixture-stdout');\n\nfunction CreateCommand() {\n  return Command.apply(this, arguments);\n}\n\nutil.inherits(CreateCommand, Command);\n\n//\n// Create a New App.\n//\n//  Creates an project on the local filesystem.\n//\n//  Options:\n//\n//    - `options` {Object} is data required to create an app\n//      - `name` {String} is a directory path for the app.\n//      - `template` {String} is the application name (default: 'hoodiehq/my-first-hoodie')\n//    - [`callback`] {Function} is triggered after creating the app.\n//      - `err` {Error} is null unless there is an error.\n//\n//  Returns:\n//\n//    {hoodie} for chaining.\n//\nCreateCommand.prototype.run = function(options, callback) {\n\n  options.name = options.name || 'my-first-hoodie';\n\n  options.tmpl_cfg = {\n    template: options.template || dirUtils.getRepoFromTemplate(options),\n    entity: dirUtils.getEntityFromTemplate(options),\n    repo: dirUtils.getRepoFromTemplate(options),\n    branch: dirUtils.getBranchFromTemplate(options),\n    uri: undefined\n  };\n\n  options.tmpl_cfg.uri = dirUtils.buildGitURI(options);\n  options.plugins = options.plugins || [];\n  options.cwd = process.cwd();\n  options.targetDir = dirUtils.appDir(options);\n\n  if (options.ssh) {\n    options.tmpl_cfg.template = '' + dirUtils.buildGitURI(options) + '';\n  }\n\n  options.npmArgs = {\n    loglevel: 'silent'\n  };\n\n  if (options.verbose) {\n    options.npmArgs.loglevel = 'verbose';\n  }\n\n  // optional callback\n  callback = callback || function() {};\n\n  this.execute(options, callback);\n\n  this.insight.track('hoodie', 'new');\n\n  return this.hoodie;\n\n};\n\nCommand.prototype.mkdir = function (options, ctx, callback) {\n\n  var self = ctx;\n\n  try {\n    shell.mkdir('-p', options.targetDir);\n    return callback(null);\n  } catch(e) {\n    self.hoodie.emit('err', 'directory already exists');\n    return callback(new Error());\n  }\n\n};\n\nCreateCommand.prototype.checkCache = function (options, ctx, callback) {\n\n  var self = ctx;\n\n  var registryAvailable = function(npm, callback) {\n    var host = npm.config.get('registry').replace(/https+:\\/\\/|\\//g, '');\n    require('dns').resolve(host, function(err) {\n      if (err) {\n        self.hoodie.emit('warn', 'Error reaching the npm registry: Trying to install from cache');\n        return callback({\n          useCache: true\n        });\n      }\n      self.hoodie.emit('info', 'The npm registry is available');\n      callback();\n    });\n  };\n\n  var latest = function(npm, callback) {\n    var fixture = new StdOutFixture();\n    fixture.capture(function() {\n      return false;\n    });\n\n    npm.info(options.tmpl_cfg.template, function(err, pkg) {\n      fixture.release();\n\n      if (err) {\n        self.hoodie.emit('info', 'Template not published on npm');\n        return callback();\n      }\n\n      options.tmpl_cfg.latest = Object.keys(pkg)[0];\n      callback();\n    });\n  };\n\n  var latestCached = function(npm, callback) {\n    var fixture = new StdOutFixture();\n    fixture.capture(function() {\n      return false;\n    });\n\n    npm.commands.cache([\n      'ls',\n      options.tmpl_cfg.template + '@' + options.tmpl_cfg.latest\n    ], function(err, entries) {\n\n      fixture.release();\n\n      if (err) {\n        self.hoodie.emit('warn', 'Error listing npm cache:');\n        self.hoodie.emit('warn', err.message);\n        return callback(err);\n      }\n\n      if (entries.length) {\n        self.hoodie.emit('info', 'Installing from the npm cache');\n        return callback({\n          useCache: true\n        });\n      }\n\n      self.hoodie.emit('info', 'Fresh install');\n      return callback();\n    });\n  };\n\n  npm.load(options.npmArgs, function(err, npm) {\n    if (err) {\n      self.hoodie.emit('warn', 'Error loading npm:');\n      self.hoodie.emit('warn', err.message);\n      return callback(err);\n    }\n\n    async.applyEachSeries([\n      registryAvailable,\n      latest,\n      latestCached\n    ], npm, function(err) {\n      if (err && err.useCache) {\n        options.npmArgs['cache-min'] = 1e12;\n        options.npmArgs['no-registry'] = true;\n        return callback();\n      }\n      if (err) {\n        return callback(err);\n      }\n      callback();\n    });\n  });\n\n};\n\nCreateCommand.prototype.fetch = function (options, ctx, callback) {\n\n  var self = ctx;\n\n  self.hoodie.emit('info', 'This may take some time.');\n\n  npm.load(options.npmArgs, function(err, npm) {\n    if (err) {\n      self.hoodie.emit('warn', 'Error loading npm:');\n      self.hoodie.emit('warn', err.message);\n      return callback(err);\n    }\n\n    var pkg = options.tmpl_cfg.template;\n\n    if (options.tmpl_cfg.latest && !/@/.test(pkg)) {\n      pkg += '@' + options.tmpl_cfg.latest;\n    }\n\n    npm.install(pkg, function(err, deps, pkg) {\n      if (err) {\n        self.hoodie.emit('warn', 'Error installing template:');\n        self.hoodie.emit('warn', err.message);\n        return callback(err);\n      }\n\n      options.srcDir = path.resolve(Object.keys(pkg)[0]);\n      return callback(null);\n    });\n  });\n\n};\n\n//\n// Copy template directory to target location.\n//\nCommand.prototype.copyToCwd = function (options, ctx, callback) {\n\n  var self = ctx;\n\n  try {\n    self.hoodie.emit('info', 'Preparing: ' + options.name + ' ...');\n    shell.cp('-R', options.srcDir + '/', options.targetDir);\n    return callback(null);\n  } catch(err) {\n    self.hoodie.emit('err', 'cannot copy directory ');\n    return callback(err);\n  }\n\n};\n\n//\n// cleanup after 'git clone' - removes .git folder.\n//\nCreateCommand.prototype.cleanup = function(options, ctx, callback) {\n\n  var self = ctx;\n\n  rmrf(options.srcDir, function (err) {\n\n    if (err) {\n      self.hoodie.emit('error', 'Could not remove temporary template.');\n      return callback(err);\n    }\n\n    return callback(null);\n\n  });\n\n};\n\n//\n// Rename.\n//\nCreateCommand.prototype.rename = function (options, ctx, callback) {\n\n  var self = ctx;\n\n  process.chdir(dirUtils.appDir(options));\n\n  var isPackageJson = function(filename) {\n    return filename.match(/\\.json$/);\n  };\n\n  // Replace my-first-hoodie in package.json and www/index.html\n  var readFile = function(file) {\n\n    if (isPackageJson(file)) {\n      var package_json = JSON.parse(fs.readFileSync(file));\n      package_json.name = options.name;\n      return JSON.stringify(package_json, null, 2);\n    }\n\n    return fs.readFileSync(file)\n      .toString()\n      .replace(/\\{\\{my-first-hoodie\\}\\}/gi, options.name);\n  };\n\n  var writeFile = function(file) {\n    return fs.writeFileSync(file, readFile(file));\n  };\n\n  var files = [\n    'package.json',\n    path.normalize('./www/index.html')\n  ];\n\n  files\n    .filter(fs.existsSync)\n    .forEach(writeFile);\n\n  self.hoodie.emit('info', 'Updated package.json');\n\n  return callback(null);\n\n};\n\n//\n// Execute.\n//\nCreateCommand.prototype.execute = function (options) {\n\n  var self = this;\n\n  async.applyEachSeries([\n    self.mkdir,\n    self.checkCache,\n    self.fetch,\n    self.copyToCwd,\n    self.cleanup,\n    self.rename\n  ], options, self, function (err) {\n\n    if (err) {\n\n      var errStr = '\\nSomething\\'s wrong here...\\n' +\n        '\\n' +\n        'Run \\\"hoodie new ' + options.name + ' --verbose\\\"\\n' +\n        'and come talk to us on freenode #hoodie \\n';\n\n      self.hoodie.emit('error', errStr);\n      process.exit(1);\n      throw err;\n    }\n\n    self.hoodie.emit('info', 'Created project at', path.join(options.cwd, options.name));\n\n    var sucStr = 'You can now start using your hoodie app\\n' +\n      '\\n' +\n      '  cd ' + options.name + '\\n' +\n      '  hoodie start\\n';\n\n    self.hoodie.emit('info', sucStr);\n\n  });\n\n};\n\nmodule.exports = {\n  exec: function (hoodie) {\n    return new CreateCommand(hoodie);\n  }\n};\n\n","/home/travis/build/npmtest/node-npmtest-hoodie-cli/node_modules/hoodie-cli/lib/hoodie/util/command.js":"var openBrowser = require('open');\n\nvar insightProvider = require('./insight');\nvar pid = require('./pid');\n\n//\n// Base Command.\n//\n// > All your base are belong to us.\n//\n// All commands should inherit from the base `Command` object.\n//\n// This object handles the dependency injection of the `hoodie` object.\n//\n// This has two major benefits:\n//   1. Allows `hoodie` to create instances. This is helpful for testing.\n//   2. Allows test framework to mock public interfaces during tests.\n//\n// Options:\n//\n//   - `hoodie` {Object} is the instance of `hoodie` for this command.\n//\n// Returns:\n//\n//   {Function} that will call the inheriting class' `run` function.\n//\n\n\n\nfunction Command(hoodie) {\n\n  var self = this;\n\n  self.hoodie = hoodie;\n\n  return function() {\n    return self.run.apply(self, arguments);\n  };\n}\n\nCommand.prototype.insight = insightProvider();\n\nCommand.prototype.pid = pid;\n\n//\n// Open app in browser\n//\nCommand.prototype.openBrowser = function (www, callback) {\n\n  var url = 'http://' + www.host + ':' + www.port;\n  openBrowser(url, callback);\n\n};\n\nmodule.exports = Command;\n\n","/home/travis/build/npmtest/node-npmtest-hoodie-cli/node_modules/hoodie-cli/lib/hoodie/util/insight.js":"var Insight = require('insight');\nvar pkg = require('../../../package.json');\n\nmodule.exports = function () {\n\n  var trackingCode;\n\n  if (!process.env.CI) {\n    trackingCode = 'UA-53355776-2';\n  } else {\n    trackingCode = 'UA-00000000-0';\n  }\n\n  var insight = new Insight({\n    trackingCode: trackingCode,\n    packageName: pkg.name,\n    packageVersion: pkg.version\n  });\n\n  insight.optOut = false;\n\n\n  return insight;\n\n};\n\n","/home/travis/build/npmtest/node-npmtest-hoodie-cli/node_modules/hoodie-cli/lib/hoodie/util/pid.js":"var fs = require('fs');\nvar path = require('path');\n\nvar internals = {\n\n  path: null,\n\n  writePid: function (path, force) {\n    var pid = new Buffer(process.pid + '\\n');\n    var fd = fs.openSync(path, force ? 'w' : 'wx');\n    var offset = 0;\n\n    while (offset < pid.length) {\n      offset += fs.writeSync(fd, pid, offset, pid.length - offset);\n    }\n\n    fs.closeSync(fd);\n  },\n\n  ulink: function (path) {\n    try {\n      fs.unlinkSync(path);\n      internals.path = null;\n    } catch (err) {\n\n    }\n  }\n\n};\n\nexports.create = function(path, force) {\n  internals.path = path;\n  internals.writePid(internals.path, force);\n};\n\nexports.remove = function () {\n  internals.ulink(internals.path);\n};\n\nexports.exists = function () {\n  return fs.existsSync(path.resolve('data/hoodie.pid'));\n};\n\n","/home/travis/build/npmtest/node-npmtest-hoodie-cli/node_modules/hoodie-cli/lib/hoodie/util/dir.js":"var path = require('path');\n\n//\n// get is cache dir\n//\nexports.getCacheDir = function () {\n  var homedir = 'HOME';\n\n  if (process.platform === 'win32') {\n    homedir = 'USERPROFILE';\n  }\n\n  var cacheDir = path.join(process.env[homedir], '.hoodie/cache/');\n\n  return cacheDir;\n};\n\n\n//\n// build repo url\n//\nexports.buildGitURI = function (options) {\n\n  var protocols = ['git@', 'https://'];\n  var separator = ['/', ':'];\n  var host = 'github.com';\n\n  var cProtocol = options.ssh ? protocols[1] : protocols[0];\n  var cSeparator = options.ssh ? separator[1] : separator[0];\n\n  return cProtocol + host + cSeparator + options.tmpl_cfg.entity + separator[0] + options.tmpl_cfg.repo + '.git';\n};\n\n\n//\n// returns application name\n//\n\nexports.appDir = function (options) {\n  return path.join(options.cwd, options.name);\n};\n\n\nexports.getRepoFromTemplate = function (options) {\n\n  var tmpl = 'my-first-hoodie';\n\n  if (!options.template) {\n    return tmpl;\n  }\n\n  if (options.template) {\n    return options.template.split('/').slice(-1)[0];\n  }\n\n};\n\nexports.getEntityFromTemplate = function (options) {\n\n  var entity = 'hoodiehq';\n\n  if (!options.template) {\n    return entity;\n  }\n\n  if (options.template) {\n    return options.template.split('/')[0];\n  }\n\n};\n\n\nexports.getBranchFromTemplate = function (options) {\n\n  if (options.template) {\n    return options.template.split('#').slice(-1)[0];\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-hoodie-cli/node_modules/hoodie-cli/lib/hoodie/install.js":"var Command = require('./util/command');\nvar packages = require('./util/packages');\n\nvar util = require('util');\nvar async = require('async');\nvar npm = require('npm');\n\nfunction CreateCommand() {\n  return Command.apply(this, arguments);\n}\n\nutil.inherits(CreateCommand, Command);\n\n//\n// Installs plugin.\n//\n// Installs a hoodie plugin\n//\n// Options:\n//\n//   - `options` {Object} is data required to create an app\n//     - `plugin` {String}\n//   - [`callback`] {Function} is triggered after creating the app.\n//     - `e` {Error} is null unless there is an error.\n//\n// Returns:\n//\n//   {hoodie} for chaining.\n///\n\nCreateCommand.prototype.run = function(options, callback) {\n\n  // require options\n  if (!options) {\n    this.hoodie.emit('warn', 'requires options parameter:');\n    return;\n  }\n\n  options.npmArgs = {\n    loglevel: 'silent'\n  };\n\n  if (options.verbose) {\n    options.npmArgs.loglevel = 'verbose';\n  }\n\n  // optional callback\n  callback = callback || function() {};\n\n  this.insight.track('hoodie', 'install');\n\n  // install plugin\n  this.execute(options, callback);\n\n  return this.hoodie;\n};\n\n\n//\n// Execute.\n//\n\nCreateCommand.prototype.execute = function(options, callback) {\n\n  var self = this;\n\n  if (options.link) {\n    npm.load(options.npmArgs, function(err, npm) {\n      if (err) {\n        self.hoodie.emit('warn', 'Error loading npm:');\n        self.hoodie.emit('warn', err.message);\n        process.exit(1);\n        throw err;\n      }\n\n      npm.link(function(err) {\n        if (err) {\n          self.hoodie.emit('warn', 'Error installing: ');\n          self.hoodie.emit('warn', err.message);\n          process.exit(1);\n          throw err;\n        }\n\n        self.hoodie.emit('info', 'Successfully linked modules');\n      });\n\n    });\n    return;\n  }\n\n  if (!options.plugins) {\n    var err = 'requires plugins parameter:';\n    this.hoodie.emit('warn', err);\n    callback(err);\n    return;\n  }\n\n  // TODO: the below needs a refactor\n  // probably worth breaking up the logic into smaller more\n  // reusable pieces\n\n  var pluginsArr = options.plugins.split(',');\n\n  self.hoodie.emit('info', 'Installing plugin(s): ' + pluginsArr.join(' '));\n\n  npm.load(options.npmArgs, function(err, npm) {\n    if (err) {\n      self.hoodie.emit('warn', 'Error loading npm:');\n      self.hoodie.emit('warn', err.message);\n      throw err;\n    }\n    npm.config.set('save', true);\n\n    async.map(pluginsArr, function (p, cb) {\n\n      var pluginName = p.trim();\n\n      if (pluginName.match('hoodie-plugin-')) {\n        pluginName = pluginName.replace('hoodie-plugin-', '');\n      }\n\n      var fullName = 'hoodie-plugin-' + pluginName;\n\n      npm.install(fullName, function(err) {\n        if (err) {\n          self.hoodie.emit('warn', 'Error installing plugin: ' + pluginName);\n          self.hoodie.emit('warn', err.message);\n          process.exit(1);\n          throw err;\n        }\n\n        self.hoodie.emit('info', 'Successfully installed ' + pluginName + ' plugin');\n        return cb(null, p);\n      });\n    },\n    function (err, plugins) {\n      var modules = plugins.map(function (name) {\n        return 'hoodie-plugin-' + name;\n      });\n\n      packages.extendPlugins('package.json', modules, function (err) {\n        if (err) {\n          self.hoodie.emit('warn', 'Error updating package.json');\n          process.exit(1);\n          throw err;\n        }\n        self.hoodie.emit('info', 'Successfully updated package.json');\n      });\n    });\n\n  });\n};\n\nmodule.exports = {\n  exec: function(hoodie) {\n    return new CreateCommand(hoodie);\n  }\n};\n\n","/home/travis/build/npmtest/node-npmtest-hoodie-cli/node_modules/hoodie-cli/lib/hoodie/util/packages.js":"/*jshint -W079 */\n\nvar fs = require('graceful-fs');\nvar _ = require('underscore');\n\n//\n// Modifies the hoodie.plugins property of a package.json file\n// Use extendPlugins() and removePlugins() instead of calling this directly\n//\n\nexports._modifyPlugins = function (p, transform, callback) {\n  exports.readPackageJSON(p, function (err, pkg) {\n    if (err) {\n      return callback(err);\n    }\n    if (!pkg.hoodie) {\n      pkg.hoodie = {};\n    }\n    if (!pkg.hoodie.plugins) {\n      pkg.hoodie.plugins = [];\n    }\n    pkg.hoodie.plugins = transform(pkg.hoodie.plugins);\n    exports.writePackageJSON(p, pkg, callback);\n  });\n};\n\n//\n// Updates the hoodie.plugin property of a package.json file\n//\n// Options:\n//\n//   - `p           {String} the path to the package.json file to update\n//   -  plugins     {Array} an array of plugin package names or paths to add\n//   -  callback    {Function} called after package.json has written\n//\n\nexports.extendPlugins = function (p, plugins, callback) {\n  return exports._modifyPlugins(p, function (ps) {\n    return _.uniq(ps.concat(plugins));\n  }, callback);\n};\n\n//\n// Updates the hoodie.plugin property of a package.json file, removing\n// the names plugins from the array\n//\n// Options:\n//\n//   - `p           {String} the path to the package.json file to update\n//   -  plugins     {Array} an array of plugin package names or paths to remove\n//   -  callback    {Function} called after package.json has written\n//\n\nexports.removePlugins = function (p, plugins, callback) {\n  return exports._modifyPlugins(p, function (ps) {\n    return ps.filter(function (plugin) {\n      return !(_.contains(plugins, plugin));\n    });\n  }, callback);\n};\n\n//\n// Reads the package.json file, returning the parsed JSON\n//\n// Options:\n//\n//   - `p           {String} the path to the package.json file to read\n//   -  callback    {Function} called after package.json has been read\n//\n\nexports.readPackageJSON = function (p, callback) {\n  fs.readFile(p, function (err, buf) {\n    if (err) {\n      return callback(err);\n    }\n    var pkg;\n    try {\n      pkg = JSON.parse(buf.toString());\n    }\n    catch (e) {\n      return callback(e);\n    }\n    return callback(null, pkg);\n  });\n};\n\n//\n// Writes the package.json file\n//\n// Options:\n//\n//   - `p           {String} the path to the package.json file to write\n//   -  pkg         {Object} the json object to write to package.json\n//   -  callback    {Function} called after package.json has been written\n//\n\nexports.writePackageJSON = function (p, pkg, callback) {\n  var output = JSON.stringify(pkg, null, 2);\n  fs.writeFile(p, output, callback);\n};\n\n","/home/travis/build/npmtest/node-npmtest-hoodie-cli/node_modules/hoodie-cli/lib/hoodie/uninstall.js":"var Command = require('./util/command');\nvar packages = require('./util/packages');\n\nvar util = require('util');\nvar async = require('async');\nvar npm = require('npm');\n\nfunction CreateCommand() {\n  return Command.apply(this, arguments);\n}\n\nutil.inherits(CreateCommand, Command);\n\n//\n// Uninstalls plugin\n//\n// Uninstalls a hoodie plugin\n//\n// Options:\n//\n//   - `options` {Object} is data required to create an app\n//     - `plugin` {String}\n//   - [`callback`] {Function} is triggered after creating the app.\n//     - `e` {Error} is null unless there is an error.\n//\n// Returns:\n//\n//   {hoodie} for chaining.\n///\n\nCreateCommand.prototype.run = function(options, callback) {\n\n  // require options\n  if (!options) {\n    this.hoodie.emit('warn', 'requires options parameter:');\n    return;\n  }\n\n  if (!options.plugins) {\n    this.hoodie.emit('warn', 'requires options.plugins parameter:');\n    return;\n  }\n\n  options.npmArgs = {\n    loglevel: 'silent'\n  };\n\n  if (options.verbose) {\n    options.npmArgs.loglevel = 'verbose';\n  }\n\n  // optional callback\n  callback = callback || function() {};\n\n  // uninstall plugin\n  this.execute(options, callback);\n\n  this.insight.track('hoodie', 'uninstall');\n\n  return this.hoodie;\n};\n\n//\n// Execute.\n//\n\nCreateCommand.prototype.execute = function(options, callback) {\n\n  var self = this;\n  var pluginsArr = options.plugins.split(',');\n\n  self.hoodie.emit('info', 'Removing plugin(s): ' + pluginsArr);\n\n  npm.load(options.npmArgs, function(err, npm) {\n    if (err) {\n      self.hoodie.emit('warn', 'Error loading npm:');\n      self.hoodie.emit('warn', err.message);\n      throw err;\n    }\n    npm.config.set('save', true);\n\n    async.map(pluginsArr, function (plugin, cb) {\n\n      var fullName = 'hoodie-plugin-' + plugin;\n\n      npm.remove(fullName, function(err) {\n        if (err) {\n          self.hoodie.emit('warn', 'Error uninstalling plugin: ' + plugin);\n          self.hoodie.emit('warn', err.message);\n          callback(err);\n          process.exit(1);\n          throw err;\n        }\n\n        self.hoodie.emit('info', 'Successfully uninstalled ' + plugin + ' plugin');\n        cb(null, plugin);\n      });\n    },\n    function (err, plugins) {\n      var modules = plugins.map(function (name) {\n        return 'hoodie-plugin-' + name;\n      });\n      packages.removePlugins('package.json', modules, function (err) {\n        if (err) {\n          self.hoodie.emit('warn', 'Error updating package.json');\n          process.exit(1);\n          throw err;\n        }\n        self.hoodie.emit('info', 'Successfully updated package.json');\n      });\n    });\n\n  });\n};\n\nmodule.exports = {\n  exec: function(hoodie) {\n    return new CreateCommand(hoodie);\n  }\n};\n\n","/home/travis/build/npmtest/node-npmtest-hoodie-cli/node_modules/hoodie-cli/lib/hoodie/start.js":"var Command = require('./util/command');\nvar util = require('util');\nvar fs = require('graceful-fs');\nvar async = require('async');\nvar fork = require('child_process').fork;\nvar path = require('path');\n\nfunction CreateCommand() {\n  return Command.apply(this, arguments);\n}\n\nutil.inherits(CreateCommand, Command);\n\n//\n// Start hoodie services.\n//\n// Options:\n//   - `browser` {String} whether to open a browser window upon app start\n//\n//   - [`callback`] {Function} is triggered after creating the app.\n//     - `e` {Error} is null unless there is an error.\n//\n// Returns:\n//\n//   {hoodie} for chaining.\n///\n\nCreateCommand.prototype.run = function(options, callback) {\n\n  // require options\n  if (!options) {\n    this.hoodie.emit('warn', 'requires options parameter:');\n    return;\n  }\n\n  this.insight.track('hoodie', 'start');\n\n  // optional callback\n  callback = callback || function() {};\n\n  this.execute(options, callback);\n\n  return this.hoodie;\n};\n\n//\n// Execute.\n//\n\nCreateCommand.prototype.execute = function(options, callback) {\n  var self = this;\n  var processArgs = [];\n\n  // adds ability to bypass sudo check\n  //\n  if (!options.sudo) {\n    if (process.env.SUDO_USER) {\n      this.hoodie.emit('warn', 'Hoodie does not support being run as sudo. Please try again.');\n      return callback();\n    }\n  }\n\n  async.detect([\n    path.resolve('node_modules/hoodie-server/bin/start')\n  ], fs.exists, function (startPath) {\n\n    // bail if hoodie start not found\n    if (!startPath) {\n      self.hoodie.emit('warn', 'Could not start hoodie.');\n      return callback(new Error('Could not find hoodie-server'));\n    }\n\n    // serve from custom location\n    if (options.www) {\n      processArgs.push('--www', options.www);\n      self.hoodie.emit('info', 'Serving hoodie from ' + options.www);\n    }\n    // configure custom ports\n    if (options['custom-ports']) {\n      processArgs.push('--custom-ports', options['custom-ports']);\n      self.hoodie.emit('info', 'Serving hoodie on custom ports ' + options['custom-ports']);\n    }\n\n    if (options.verbose) {\n      processArgs.push('-v');\n    }\n\n    if (!self.pid.exists()) {\n      // forks hoodie app and listens for messages\n      // coming through on the process\n      var serverProcess = fork(startPath, processArgs);\n\n      serverProcess.on('message', function (msg) {\n\n        if (msg.app.started) {\n\n          //write PID file\n          try {\n            self.pid.create(path.resolve('data/hoodie.pid'));\n          } catch (err) {\n            self.hoodie.emit('warn', err.message);\n            process.exit(1);\n            return callback(err);\n          }\n\n          // open hoodie app in browser\n          if (!options.noBrowser) {\n\n            self.openBrowser(msg.stack.www, function (err) {\n\n              if (err) {\n                self.hoodie.emit('warn', err.message);\n                process.exit(1);\n                return callback(err);\n              }\n\n              self.hoodie.emit('info', 'Hoodie app is running!');\n              return callback();\n            });\n          }\n\n        }\n\n        return callback();\n\n      });\n    } else {\n      self.hoodie.emit('warn', 'Hoodie is already running!');\n    }\n\n\n  });\n\n  // remove PID if process is terminated.\n  ['SIGTERM', 'SIGINT', 'SIGHUP', 'SIGQUIT', 'exit'].forEach(function (s) {\n    process.on(s, self.pid.remove);\n  });\n\n};\n\nmodule.exports = {\n  exec: function(hoodie) {\n    return new CreateCommand(hoodie);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-hoodie-cli/node_modules/hoodie-cli/lib/hoodie/reset.js":"var Command = require('./util/command');\n\nvar fs = require('fs');\nvar ini = require('ini');\nvar path = require('path');\nvar util = require('util');\n\n\nfunction CreateCommand() {\n  return Command.apply(this, arguments);\n}\n\nutil.inherits(CreateCommand, Command);\n\n//\n// Reset Config Param.\n//\n// Options:\n//\n//   - `options` {Object} is data required to create an app\n//     - `plugin` {String}\n//   - [`callback`] {Function} is triggered after creating the app.\n//     - `e` {Error} is null unless there is an error.\n//\n// Returns:\n//\n//   {hoodie} for chaining.\n///\n\nCreateCommand.prototype.run = function(options, callback) {\n\n  // require options\n  if (!options) {\n    this.hoodie.emit('warn', 'requires options parameter:');\n    return;\n  }\n\n  // optional callback\n  callback = callback || function() {};\n\n  this.insight.track('hoodie', 'reset');\n\n  this.reset(callback);\n\n  return this.hoodie;\n};\n\n//\n// Reset Password.\n//\n\nCreateCommand.prototype.reset = function (cb) {\n\n  var self = this;\n  var couchIniPath = path.join(process.cwd(), 'data/couch.ini');\n  var config = ini.parse(fs.readFileSync(couchIniPath, 'utf-8'));\n\n  delete config.admins;\n\n  fs.writeFile(couchIniPath, ini.stringify(config), function (err) {\n    if (err) {\n      self.hoodie.emit('warn', 'oups, something went wrong');\n      cb(err);\n      return;\n    }\n\n    self.hoodie.emit(\n      'info', 'password reset sucessfully. Please run \\'hoodie start\\''\n    );\n    cb(null);\n  });\n\n};\n\nmodule.exports = {\n  exec: function(hoodie) {\n    return new CreateCommand(hoodie);\n  }\n};\n\n","/home/travis/build/npmtest/node-npmtest-hoodie-cli/node_modules/hoodie-cli/lib/hoodie/version.js":"var Command = require('./util/command');\nvar pkg = require('../../package.json');\n\nvar util = require('util');\nvar npm = require('npm');\n\nfunction VersionCommand() {\n  return Command.apply(this, arguments);\n}\n\nutil.inherits(VersionCommand, Command);\n\n//\n// Version reporter.\n//\n// Report the version of or hoodie.\n//\n\nVersionCommand.prototype.run = function() {\n\n  var info = 'Version: ' + pkg.version +\n    ' (node ' + process.version +\n    ', npm ' + npm.version +\n    ', platform: ' + process.platform + ')\\n';\n\n  console.log(info);\n};\n\n\nmodule.exports = {\n  exec: function(hoodie) {\n    return new VersionCommand(hoodie);\n  }\n};\n\n","/home/travis/build/npmtest/node-npmtest-hoodie-cli/node_modules/hoodie-cli/lib/cli/util/console.js":"var prompt = require('prompt');\n\n//\n// Console Info.\n//\n// Passes the parameters to `console.log`.\n//\n// Outputs:\n//\n//     $ [hoodie] message\n//\n\nmodule.exports.info = function() {\n\n  var args = Array.prototype.slice.call(arguments);\n\n  args.unshift('[hoodie]'.cyan);\n\n  console.log.apply(this, args);\n};\n\n//\n// Console Success.\n//\n// Passes the parameters to `console.log`.\n//\n// Outputs:\n//\n//     $ [hoodie] message\n//\n\nmodule.exports.success = function() {\n\n  var args = Array.prototype.slice.call(arguments);\n\n  args.unshift('[hoodie]'.green);\n\n  console.log.apply(this, args);\n};\n\n\n//\n// Console Warning.\n//\n// Passes the parameters to `console.warn`.\n//\n// Outputs:\n//\n//     $ [warning] message\n//\n\nmodule.exports.warn = function() {\n\n  var args = Array.prototype.slice.call(arguments);\n\n  args.unshift('[hoodie]'.yellow);\n\n  console.log.apply(this, args);\n\n};\n\n//\n// Console Error.\n//\n// Passes the parameters to `console.error`.\n//\n// Outputs:\n//\n//     $ [error] message\n//\n\nmodule.exports.err = function() {\n\n  var args = Array.prototype.slice.call(arguments);\n\n  args.unshift('[hoodie]'.red);\n\n  console.log.apply(this, args);\n\n};\n\n//\n// Console Prompt.\n//\n// Prompts for a value.\n//\n// Outputs:\n//\n//     $ [prompt] message:\n//\n\nmodule.exports.prompt = function(options, callback) {\n\n  // prompt setup\n  prompt.override = options.override;\n  prompt.colors = false;\n  prompt.message = '[prompt]'.green;\n  prompt.delimiter = ' ';\n  prompt.start();\n\n  // begin prompting\n  prompt.get(options.data, callback);\n\n};\n\n//\n// RAW Console Log.\n//\n// Passes the parameters to `console.log` with no prefix.\n//\n// Outputs:\n//\n//     $ message\n//\n\nmodule.exports.raw = function() {\n\n  var args = Array.prototype.slice.call(arguments);\n\n  console.log.apply(this, args);\n\n};\n","/home/travis/build/npmtest/node-npmtest-hoodie-cli/node_modules/hoodie-cli/lib/cli/argv.js":"//\n// Parse command-line arguments.\n//\n// Inspects the arguments and calls the appropriate action.\n//\n// Options:\n//\n//   - `argv` {Object} is an optimist.argv object.\n//   - `[callback]` {Function} is called on completion.\n//\n\nmodule.exports = function(argv, callback) {\n\n  // optional callback\n  callback = callback || function() {};\n\n  // --help\n  // --help <command>\n  if (argv.help || argv.h) {\n    argv._.unshift('help');\n  }\n\n  // no command displays help\n  if (!argv._.length) {\n    argv._.unshift('help');\n  }\n\n  // lookup command to execute\n  var command = this;\n  for (var i = 0, l = argv._.length; i < l; i++) {\n    if (typeof command[argv._[i]] === 'function') {\n      command = command[argv._[i]];\n    } else {\n      break;\n    }\n  }\n\n  // execute command\n  if (command === this) {\n    this.unknown(argv, callback);\n  } else {\n    command.call(this, argv, callback);\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-hoodie-cli/node_modules/hoodie-cli/lib/cli/new.js":"var hoodie = require('../main');\n\n//\n// $ hoodie create <path>\n//\n// Create a hoodie project.\n//\n// Options:\n//\n//   - `argv` {Object} is an optimist object.\n//   - `callback` {Function} is a completion callback.\n//     - `err` {Error} is null unless there was an error.\n//\n\nmodule.exports = function(argv, callback) {\n\n  this.logo();\n\n  // display help on $ hoodie new\n  if (argv._.length <= 0) {\n    argv._.unshift('help');\n    this.argv(argv, callback);\n    return;\n  }\n\n  // project info\n  var data = {\n    name: argv._[1] || argv.name || argv.n,\n    template: argv._[2] || argv.template || argv.t,\n    plugins: argv._[3] || argv.plugins || argv.p,\n    ssh: argv['use-ssh'] || argv.s,\n    verbose: argv.verbose || argv.v\n  };\n\n  // create the project\n  hoodie.new(data, function(err) {\n    callback(err);\n  });\n\n};\n","/home/travis/build/npmtest/node-npmtest-hoodie-cli/node_modules/hoodie-cli/lib/cli/install.js":"var hoodie = require('../main');\n\n//\n// $ hoodie install <plugins>\n//\n// Install hoodie plugins\n//\n// Options:\n//\n//  - `argv` {Object} is an optimist object.\n//   - `callback` {Function} is a completion callback.\n//     - `e` {Error} is null unless there was an error.\n//\n\nmodule.exports = function(argv, callback) {\n\n  this.logo();\n\n  // display help on $ hoodie install\n  if (argv._.length <= 0) {\n    argv._.unshift('help');\n    this.argv(argv, callback);\n    return;\n  }\n\n  var data = {\n    plugins: argv._[1] || argv.plugins || argv.p,\n    verbose: argv.verbose || argv.v,\n    link: argv.link\n  };\n\n  // install new plugin\n  hoodie.install(data, function(err) {\n    callback(err);\n  });\n\n};\n","/home/travis/build/npmtest/node-npmtest-hoodie-cli/node_modules/hoodie-cli/lib/cli/uninstall.js":"var hoodie = require('../main');\n\n//\n// $ hoodie uninstall <plugins>\n//\n// Uninstall hoodie plugins\n//\n// Options:\n//\n//  - `argv` {Object} is an optimist object.\n//   - `callback` {Function} is a completion callback.\n//     - `e` {Error} is null unless there was an error.\n//\n\nmodule.exports = function(argv, callback) {\n\n  this.logo();\n\n  // display help on $ hoodie uninstall\n  if (argv._.length <= 0) {\n    argv._.unshift('help');\n    this.argv(argv, callback);\n    return;\n  }\n\n  var data = {\n    plugins: argv._[1] || argv.plugins || argv.p,\n    verbose: argv.verbose || argv.v\n  };\n\n  // uninstall plugin\n  hoodie.uninstall(data, function(err) {\n    callback(err);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-hoodie-cli/node_modules/hoodie-cli/lib/cli/help.js":"var path = require('path');\nvar fs = require('graceful-fs');\n\n//\n// $ hoodie help [command]\n//\n// Outputs the usage information for a given command.\n// Each command documents the help information under /doc/cli/command.txt\n//\n// Options:\n//\n//   - `argv` {Object} is an optimist object.\n//   - `callback` {Function} is null unless there is an error.\n//\n\nmodule.exports = function(argv, callback) {\n\n  this.logo();\n\n  // help file directory\n  var basepath = path.join(__dirname, '..', '..', 'doc', 'cli');\n  var filepath;\n  var data;\n\n  // filename format: command.command.txt\n  filepath = argv._.slice(0);\n  filepath.push('txt');\n  filepath = filepath.join('.');\n\n  // full path\n  filepath = path.join(basepath, filepath);\n\n  // get help info and replace $0 with process name\n  data = fs.readFileSync(filepath, 'utf8');\n  data = data.trim().replace(/\\$0/g, argv.$0);\n\n  console.log('\\n' + data + '\\n');\n\n  callback(null);\n};\n","/home/travis/build/npmtest/node-npmtest-hoodie-cli/node_modules/hoodie-cli/lib/cli/start.js":"var hoodie = require('../main');\n\n//\n// $ hoodie start\n//\n// Starts hoodie services.\n//\n// Options:\n//\n//   - `argv` {Object} is an optimist object.\n//   - `callback` {Function} is a completion callback.\n//     - `err` {Error} is null unless there was an error.\n//\n\nmodule.exports = function(argv, callback) {\n\n  this.logo();\n\n  // display help on $ hoodie start\n  if (argv._.length <= 0) {\n    argv._.unshift('help');\n    this.argv(argv, callback);\n    return;\n  }\n\n  // start args\n  var data = {\n    noBrowser: argv.noBrowser || argv.n,\n    www: argv.www || argv.w,\n    sudo: argv['allow-sudo'] || argv.s,\n    'custom-ports': argv['custom-ports'] || argv.c,\n    verbose: argv.verbose || argv.v\n  };\n\n  // start hoodie services\n  hoodie.start(data, function(err) {\n    callback(err);\n  });\n\n};\n","/home/travis/build/npmtest/node-npmtest-hoodie-cli/node_modules/hoodie-cli/lib/cli/reset.js":"var hoodie = require('../main');\n\n//\n// $ hoodie reset <thing>\n//\n// Resets given config param.\n//\n// Options:\n//\n//   - `argv` {Object} is an optimist object.\n//   - `callback` {Function} is a completion callback.\n//     - `err` {Error} is null unless there was an error.\n//\n\nmodule.exports = function(argv, callback) {\n\n  // display help on $ hoodie reset\n  if (argv._.length <= 1) {\n    argv._.unshift('help');\n    this.argv(argv, callback);\n    return;\n  }\n\n  // project info\n  var data = {\n    password: argv._[2] || argv.password || argv.p\n  };\n\n  // create the project\n  hoodie.reset(data, function(err) {\n    callback(err);\n  });\n\n};\n","/home/travis/build/npmtest/node-npmtest-hoodie-cli/node_modules/hoodie-cli/lib/cli/unknown.js":"var cnsl = require('./util/console');\nvar util = require('util');\n\n//\n// $ hoodie noop\n//\n// Outputs that the command-line command is unsupported.\n//\n// Options:\n//\n//   - `argv` {Object} is an optimist object.\n//   - `callback` {Function} is a completion callback.\n//\n\nmodule.exports = function(argv, callback) {\n\n  this.logo();\n\n  cnsl.warn(util.format(\n    '\\'%s\\' is not a %s command. See \\'%s help\\'',\n    argv._[0],\n    argv.$0,\n    argv.$0\n  ));\n\n  callback();\n};\n","/home/travis/build/npmtest/node-npmtest-hoodie-cli/node_modules/hoodie-cli/lib/cli/version.js":"var hoodie = require('../main');\n\n//\n// $ hoodie version\n//\n// Outputs the version to the console.\n//\n\nmodule.exports = function() {\n  hoodie.version();\n};\n","/home/travis/build/npmtest/node-npmtest-hoodie-cli/node_modules/hoodie-cli/lib/cli/logo.js":"var clc = require('cli-color');\n\nmodule.exports = function() {\n\n  var logo = [\n  /* jshint ignore:start */\n    [\"\", \"\", \"\", \"\", \"\", \"\"],\n    [\".d$b.  .d$b.\", \"  .d$$$$$$b.  \", \"  .d$$$$$$b.  \", \".d$$$$$$b.  \",  \".d$b.\", \".d$$$$$$$$b.\"],\n    [\"$$$$$..$$$$$\", \".$$$$$$$$$$$b \", \".$$$$$$$$$$$b \", \"$$$$$$$$$$b \",  \"$$$$$\", \"$$$$$$$$$$P'\"],\n    [\"$$$$$$$$$$$$\", \"d$$$$$$$$$$$$b\", \"d$$$$$$$$$$$$b\", \"$$$$$$$$$$$b\",  \"$$$$$\", \"$$$$$$$$$$b.\"],\n    [\"$$$$$$$$$$$$\", \"Q$$$$$$$$$$$$P\", \"Q$$$$$$$$$$$$P\", \"$$$$$$$$$$$P\",  \"$$$$$\", \"$$$$$$$$$$P'\"],\n    [\"$$$$$´`$$$$$\", \"'$$$$$$$$$$$$'\", \"'$$$$$$$$$$$$'\", \"$$$$$$$$$$P \",  \"$$$$$\", \"$$$$$$$$$$b.\"],\n    [\"'Q$P'  'Q$P'\", \"  'Q$$$$$$P'  \", \"  'Q$$$$$$P'  \", \"'Q$$$$$$$P  \",  \"'Q$P'\", \"'Q$$$$$$$$P'\"],\n    [\"\", \"\", \"\", \"\", \"\", \"\"]\n    /* jshint ignore:end */\n  ];\n\n  logo.forEach(function(line) {\n    var blue = clc.xterm(25);\n    var green = clc.xterm(28);\n    var yellow = clc.xterm(214);\n    var orange = clc.xterm(202);\n    var brown = clc.xterm(240);\n    var red = clc.xterm(160);\n\n    console.log(\n      blue(line[0]) +\n      green(line[1]) +\n      yellow(line[2]) +\n      orange(line[3]) +\n      brown(line[4]) +\n      red(line[5])\n    );\n  });\n\n  this.version();\n\n};\n","/home/travis/build/npmtest/node-npmtest-hoodie-cli/node_modules/hoodie-cli/Gruntfile.js":"/*global module:false*/\n\nmodule.exports = function (grunt) {\n\n  'use strict';\n\n  require('load-grunt-tasks')(grunt);\n\n  // Project configuration.\n  grunt.initConfig({\n\n    jshint: {\n      files: [\n        'Gruntfile.js',\n        'lib/**/*.js',\n        'bin/*.js'\n      ],\n      options: {\n        jshintrc: '.jshintrc'\n      }\n    },\n\n    simplemocha: {\n      options: {\n        reporter: 'spec',\n        node_env: 'testing',\n        ignoreLeaks: true\n      },\n      full: { src: ['spec/runner.js'] }\n    },\n\n    watch: {\n      files: ['<%= jshint.files %>'],\n      tasks: 'jshint'\n    }\n\n  });\n\n  // Default task.\n  grunt.registerTask('test', ['jshint', 'simplemocha:full']);\n  grunt.registerTask('ci', ['test', 'integration-test']);\n  grunt.registerTask('default', ['test']);\n};\n","/home/travis/build/npmtest/node-npmtest-hoodie-cli/node_modules/hoodie-cli/lib/hoodie/util/git.js":"var shell = require('shelljs');\n\nexports.bin = function () {\n\n  var path = shell.which('git');\n\n  // Add quotation in case the path contains a space\n  // This happens on windows (c:\\program files\\nodejs\\...)\n  path = '\"' + path + '\"';\n\n  return path;\n\n};\n"}